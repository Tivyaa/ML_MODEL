import numpy as np

x = np.array([[2, 9], [1, 5], [3, 6]], dtype=float)
y = np.array([[92], [86], [89]], dtype=float)
x = x / np.amax(x, axis=0)  
y = y / 100  

def sigmoid(x): return 1 / (1 + np.exp(-x))
def derivatives_sigmoid(x): return x * (1 - x)

epoch = 5
lr = 0.1
ip_n = 2
hid_n = 3
op_n = 1

wh = np.random.uniform(size=(ip_n, hid_n))
bh = np.random.uniform(size=(1, hid_n))
wout = np.random.uniform(size=(hid_n, op_n))
bout = np.random.uniform(size=(1, op_n))

for i in range(epoch):
    hinp = np.dot(x, wh) + bh  
    hlayer_act = sigmoid(hinp) 
    outinp = np.dot(hlayer_act, wout) + bout  
    output = sigmoid(outinp)  

    EO = y - output  
    outgrad = derivatives_sigmoid(output)  
    d_output = EO * outgrad  

    EH = d_output.dot(wout.T)  
    hiddengrad = derivatives_sigmoid(hlayer_act)  
    d_hiddenlayer = EH * hiddengrad  

    wout += hlayer_act.T.dot(d_output) * lr
    wh += x.T.dot(d_hiddenlayer) * lr

print("Input:\n", x)
print("Actual Output:\n", y)
print("Predicted Output:\n", output)
