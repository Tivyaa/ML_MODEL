import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score

np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + 1.5 * X**2 + np.random.randn(100, 1)

plt.scatter(X, y, color='blue', label='Data points')
plt.xlabel('Feature')
plt.ylabel('Target')
plt.title('Synthetic Dataset')
plt.legend()
plt.show()

lin_reg = LinearRegression().fit(X, y)
y_pred_lin = lin_reg.predict(X)
mse_lin, r2_lin = mean_squared_error(y, y_pred_lin), r2_score(y, y_pred_lin)

poly_features = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly_features.fit_transform(X)
poly_reg = LinearRegression().fit(X_poly, y)
y_pred_poly = poly_reg.predict(X_poly)
mse_poly, r2_poly = mean_squared_error(y, y_pred_poly), r2_score(y, y_pred_poly)

ridge_reg = Ridge(alpha=1.0).fit(X, y)
y_pred_ridge = ridge_reg.predict(X)
mse_ridge, r2_ridge = mean_squared_error(y, y_pred_ridge), r2_score(y, y_pred_ridge)

X_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
X_range_poly = poly_features.transform(X_range)
y_range_poly = poly_reg.predict(X_range_poly)
plt.scatter(X, y, color='blue', label='Data points')
plt.plot(X_range, y_range_poly, color='red', label='Polynomial Fit')
plt.xlabel('Feature')
plt.ylabel('Target')
plt.title('Polynomial Regression')
plt.legend()
plt.show()

print(f"Linear Regression MSE: {mse_lin:.2f}, R²: {r2_lin:.2f}")
print(f"Polynomial Regression MSE: {mse_poly:.2f}, R²: {r2_poly:.2f}")
print(f"Ridge Regression MSE: {mse_ridge:.2f}, R²: {r2_ridge:.2f}")
